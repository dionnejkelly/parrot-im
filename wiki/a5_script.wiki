#summary Script for presentation.

Outline:
  # For the user
  # For the developer
  # Program's Growth
  # Analysis

----

*Section I: For the User*

*_Kevin -- 1 minute, 12 seconds_*

   _(Timing: Assume 15 seconds of "set-up time")_

   _(Timing: Introduction: 18 seconds)_
Introduction -- Title slide:
  * "Hello everybody, and thank you for joining us as we release Parrot Instant Messenger"
  * "We are a 10-person team called Pirate Captains. My name is Kevin, and I will be presenting to you today with Jihoon, our logic expert; Ahmad, our database specialist; and Jordan, our graphics mastermind."

   _(Timing: Outline: 19 seconds)_
Outline:
  * "First we will demonstrate what Parrot IM actually allows you, the user, to do. Second, we will look into the architecture behind the project. Third, we will show you pictures of Parrot IM's evolution. And then finally, we will share with you our insights from developing Parrot IM.

   _(Timing: Description: 20 seconds)_
Description:
  * "Parrot IM's appeal is that it allows you to instant message friends from 6 different networks. With this, it offers many useful and fun features. But, the best way to learn about Parrot IM is to have you experience it. For this, I'll hand it over to Jihoon. Thank you.

*_Jihoon -- 3 minutes, 30 seconds_*

Parrot IM Features:
  * Spell Checker
  * Buddy Search
  * Chat Log
  * Bug Report
  * Account Menu
  * Theme Selection

----

*Section II: For the Developer*

*_Ahmad -- 2 minutes_*

Components:
  * Present new architectural diagram. Also show the old version.
  * Highlight how our architecture is ordered with Model View Controller. 
  * Note that the Controller works with libraries to connect via protocols, the View handles GUI input and output, and the Model holds data, and holds a Database.
  * Contrast to hold diagram, with no MVC... essentially we just categorized features in the old one, instead of designing an architecture.

Statistics:
  * % implemented features
  * Metrics
QA (How do we know that Parrot IM is bug-free?):
  * Two main types of testing: automated test cases, user testing
  * Automated testing allowed us to create test cases to ensure the logic of our program worked as intended.
  * After changing our code, we could verify that the tests still passed.
  * Automated Unit and Integration testing found many internal bugs.
  * User Acceptance testing also found bugs, but also gave us design suggestions.
  * Still have bugs, but testing helped to ensure that most are known issues.
  * List known bugs, categorized in to server, gui, database, etc.

----

*Section III: Growth*

*_Jordan -- <2 minutes_*

Lead in
  * ...

Buddylist Progression:
  * This is how our buddylist has change across the 3 versions
  * From the alpha to beta we added avatar images and grouping via protocol
  * For the final we changed to grouping by status to make communication between protocols more uniform
  * Gradient background was added to all of our windows

Chatwindow Progression:
  * One of our early problems that we recieved alot of feedback about was the minimizing of the side panel. The buttons were really tiny.
  * In the beta we replaced java's split pane with a custom split pane that uses a single large button.

Customizable Themes:
  * For our final release we wanted to make our user interface more visually appealing as wells as give the user the ability to customize the colors.
  * We added a gradient to all of our windows
  * We added user customizable colors that when change are applied to all of the windows throughout the program.
  * there are a couple of preset themes or the user can customize further.
  * The customize able colors are stored in the database with the users profile data.
  * When a profile is selected from the main menu drop box the programs colors are changed. Even before loggin in.

User Feedback:
  * many of the changes that we have made to our interface has been influenced by user feedback and feedback from members in the group.
  * one example of this is the profile manager.
  * initially it was very confusing, and I personally when back the other day and tryed to use the old profile manager and it took me several trys to figure out how to use it.
  * several of the buttons arent labeled.
  * the difference between accounts and profiles is anbigious
  * this was changed in beta, and the only difference between beta and final is the colors and the addition of the done button.

Note: I touch on user feedback regarding the buddylist and the chatwindow when I talk about the changes that we made.

----

*Section IV: Analysis*

*_Kevin -- 1 minute, 1 second_*

   _(Timing: Challenges: 29 seconds")_   
Challenges:
  * "Thank you, Jordan. Our program's evolution was not without challenges. Most notably, we encountered many bugs not with our code, but with the libraries we used. That, and some were so poorly documented, that we had to read the source code to use them."
  * "Also, we did not use many project management techniques, which resulted in some confusion during later stages of development. But by having regular work meetings, we accomplished most of our coding together, which kept us coordinated."

   _(Timing: Hindsight: 32 seconds")_

Hindsight:
  * "If we had to make Parrot IM again, we would have taken the design more seriously. We learned that once you implement something, it is very hard to go back. We should have planned our classes and methods much more precisely."
 * "But overall, we are very happy with how Parrot IM was developed. Everybody on our team made major contributions. Communication amongst our team was definitely one of our strengths, too. It kept us active, and it kept us happy while coding."
 * "That concludes our presentation. Thank you very much, everybody. May we answer any of your questions?"
  
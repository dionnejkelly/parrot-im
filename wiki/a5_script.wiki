#summary Script for presentation.

Outline:
  # For the user
  # For the developer
  # Program's Growth
  # Analysis

----

*Section I: For the User*

_Kevin -- 1 minute, 12 seconds_

   (Timing: Assume 15 seconds of "set-up time")

   (Timing: Introduction: 18 seconds)
Introduction -- Title slide:
  * "Hello everybody, and thank you for joining us as we release Parrot Instant Messenger"
  * "We are a 10-person team called Pirate Captains. My name is Kevin, and I will be presenting to you today with Jihoon, our logic expert; Ahmad, our database specialist; and Jordan, our graphics mastermind."

   (Timing: Outline: 19 seconds)
Outline:
  * "First we will demonstrate what Parrot IM actually allows you, the user, to do. Second, we will look into the architecture behind the project. Third, we will show you pictures of Parrot IM's evolution. And then finally, we will share with you our insights from developing Parrot IM.

   (Timing: Description: 20 seconds)
Description:
  * "Parrot IM's appeal is that it allows you to instant message friends from 6 different networks. With this, it offers many useful and fun features. But, the best way to learn about Parrot IM is to have you experience it. For this, I'll hand it over to Jihoon. Thank you.


Summary:
  * For the last 3 months, we have developed Parrot IM
  * It is an instant messenger that can connect to multiple networks: google, twitter, and msn, and provides fun communication with cool features, such as chat bot, custom themes, and smart searching.
  * Lead-in to Jihoon, to "demonstrate" some of these features.

_Jihoon -- 4 minutes_

Features:
  * pair with ss, jihoon talk?
  * (Note: this is our "demo"!)

----

*Section II: For the Developer*

_Ahmad -- 2 minutes_

Components:
  * Present new architectural diagram. Also show the old version.
  * Highlight how our architecture is ordered with Model View Controller. 
  * Note that the Controller works with libraries to connect via protocols, the View handles GUI input and output, and the Model holds data, and holds a Database.
  * Contrast to hold diagram, with no MVC... essentially we just categorized features in the old one, instead of designing an architecture.

Statistics:
  * % implemented features
  * Metrics
QA (How do we know that Parrot IM is bug-free?):
  * Two main types of testing: automated test cases, user testing
  * Automated testing allowed us to create test cases to ensure the logic of our program worked as intended.
  * After changing our code, we could verify that the tests still passed.
  * Automated Unit and Integration testing found many internal bugs.
  * User Acceptance testing also found bugs, but also gave us design suggestions.
  * Still have bugs, but testing helped to ensure that most are known issues.
  * List known bugs, categorized in to server, gui, database, etc.

----

*Section III: Growth*

_Jordan -- 2 minutes_

UA Feedback:
  * Lead in from Ahmad's QA comments.
  * Primarily use quotes from users, but use them (if possible) to show why we changed the GUI.

Screenshots:
  * Compare the following:



----

*Section IV: Analysis*

_Kevin -- 1 minute_

Review:
  * Talk about meeting structure, work meetings.
  * Main technical problems with libraries... most had bugs we unexpected.
  * No real "people problems". Conflicting design ideas contributed to some frustration and tensions, but this is the fault of poor leadership, rather than poor attitudes.

Hindsight:
  * Would have designed better, thought about implementation sooner.
  * Come up with MVC not so late.
  * Should have used more project management tools, such as activity networks.
  
#summary Script for presentation.

Outline:
  # For the user
  # For the developer
  # Growth
  # Analysis

----

*Section I: For the User*

_Kevin -- 45 seconds_

Introduction:
  * introduce team Pirate Captains, note people on floor

Summary:
  * For the last 3 months, we have developed Parrot Instant Messenger
  * It is an instant messenger that can connect to multiple networks: google, twitter, and msn, and provides fun communication with cool features, such as chat bot, custom themes, and smart searching.

_Jihoon -- 4 minutes_

Features:
  * pair with ss, jihoon talk?
  * (Note: this is our "demo"!)

----

*Section II: For the Developer*

_Ahmad -- 2 minutes_

Components:
  * Present new architectural diagram. Also show the old version.
  * Highlight how our architecture is ordered with Model View Controller. 
  * Note that the Controller works with libraries to connect via protocols, the View handles GUI input and output, and the Model holds data, and holds a Database.
  * Contrast to hold diagram, with no MVC... essentially we just categorized features in the old one, instead of designing an architecture.

Statistics:
  * % implemented features
  * Metrics
QA (How do we know that Parrot IM is bug-free?):
  * Two main types of testing: automated test cases, user testing
  * Automated testing allowed us to create test cases to ensure the logic of our program worked as intended.
  * After changing our code, we could verify that the tests still passed.
  * Automated Unit and Integration testing found many internal bugs.
  * User Acceptance testing also found bugs, but also gave us design suggestions.
  * Still have bugs, but testing helped to ensure that most are known issues.
  * List known bugs, categorized in to server, gui, database, etc.

----

*Section III: Growth*

_Jordan -- 2 minutes_

UA Feedback:

Screenshots:
  * Compare the following:



----

*Section IV: Analysis*

_Kevin -- 1 minute_

Review:
  * Talk about meeting structure, work meetings.
  * Main technical problems with libraries... most had bugs we unexpected.
  * No real "people problems". Conflicting design ideas contributed to some frustration and tensions, but this is the fault of poor leadership, rather than poor attitudes.

Hindsight:
  * Would have designed better, thought about implementation sooner.
  * Come up with MVC not so late.
  * Should have used more project management tools, such as activity networks.
  
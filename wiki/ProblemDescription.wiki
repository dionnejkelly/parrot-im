#summary Problem description for assignment one
#labels Phase-Requirements

==Project Background==
 * This project is aiming to create a completely featured instant messaging client, such as MSN, ICQ, Twitter. Also, this communication client should be able to combine other communication tools. The ultimate goal of this project is that this communication client should be error free, full-featured and everybody in the world should be able to use it anytime anywhere. However, this goal is hard to reach because some problems, namely time constraint, team composition, and lack of technical expertise of the team members.  So, the basic goal of this project is to create a working bug-free communication client for the users and ensure the basic functions of this communication client work smoothly.   

==Stakeholders==
 * Our programming team members
 * The Parrot-IM client who wants the software to be completed
 * Users that use the software as a means of entertainment and an extensible instant messaging  

==Users==
 * The users of our feature-rich instant messaging program that is compatible with multiple protocols, including XMPP, are available to everyone who would like to use our software. Our software is meant to provide an easy-to-use and friendly instant messaging program that allows the users to share their conversation with other registered users.

==Risks==
|| *Risk* || *Likelihood of the risk occurring* || *Severity of the risk* || *Prevention* || *Resolution* ||
|| Poor time management|| High chance || Catastrophic || Obey the schedule. Those who don't obey will be penalized (e.g. treat the whole group for lunch) || Have a group meeting to find out the solution ||  
|| Lack of technology experience   || High chance || Serious || Try to find out what tool or software we will be used in this project || Try to use other tools which we are familiar and comfortable with || 
|| Unsolvable technical issue || Medium chance || Tolerable || Stay ahead of schedule so that unsolvable issues can be identified quickly || Try a different approach, research other methods, or alter design to work around the issue || 
|| One or more member(s) leaves for vacation|| Low chance || Serious || Have each member of the group inform their schedules in advance || Reassign role ||
|| One or more member(s) is sick|| Medium chance || Serious || Stay healthy (e.g. rest) || Reassign role ||
|| Team members not coming to consensus || Medium chance || Serious || Strive to be as democratic as possible in our meetings|| Voting ||
|| All source code being lost || Low chance || Catastrophic  || Store back-up data in repository || Check our own local copies ||
|| Team members having trouble with their assigned role || High chance || Tolerable || Team members inform each other in advance || Team members help each other ||
|| SVN Repository is down || Low chance || Serious || Team members store back-up data in their local computers|| Team members come up with consensus and use our own local copies to update ||
|| Team members having trouble with implementation || High chance || Serious || Prepare good project management with well thought out plans || Team members help each other and as a last resort consult the TA or the instructor ||
|| Forget to implement a feature || Low chance || Serious || Regularly review the design documents || Dedicate more resources to implement the feature ||
|| Integration of components is difficult || High chance || Tolerable || Communicate accurately to teammates from other groups about design || Review code together and determine a better method of integration ||
|| Program runs slowly || Low chance || Catastrophic || Test for speed throughout production on as many machines as possible || Reexamine low-level code and determine methods to make the code more efficient ||
|| Program does not function the way users want || Medium chance || Catastrophic || Design from the users' perspective and have as many people test the program as possible || Review the specifications, then remove and add features to implement ||
|| A member uploads the wrong code || Medium chance || Tolerable || Ensure that working copy is up to date and that one file at a time is being worked on || Revert the repository to a previous version ||

==Assumptions:==
The list of all the important assumptions can be divided into three different categories:<br>
 * *The programmers (our team members):*
  * Our team members having passion and eagerness to thoroughly complete this project.
  * Our team members putting a maximum effort to finish the project.
  * Our team members understanding more about the software development as we go along with the project.
  * Our team members assuming that the software will be primarily used by an English-speaking population.
  * Our team members are assuming that XMPP is the main protocol we will need in order for the instant messaging client to function to our needs.
 * *The client:*
  * The client is assuming that the project is capable of implementing the specifications.
  * The client is assuming that the project will be thoroughly completed within the due date.
  * The client is assumed to have users in mind that will use the software.
 * *The users:* 
  * The users are assuming that the program will be updated occasionally with new features and bug-free software.
  * The users are assuming that the software is not harmful or provoke any negative effects to influence their health or behaviors while using the program.
  * The users are assumed to have XMPP accounts that allow them to use the software.